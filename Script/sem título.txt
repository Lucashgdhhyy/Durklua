local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Dark Hub X : Blox Fruit🔥😈", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest", IntroText = "Loading Hub"})
local fTab = Window:MakeTab({
	Name = "Farms",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})
fTab:AddParagraph("Farm😈🔥","Melhores scripts aqui!😈🔥")

fTab:AddButton({
	Name = "Redz Hub",
	Callback = function()
	--[[
	WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
loadstring(game:HttpGet("https://raw.githubusercontent.com/realredz/BloxFruits/refs/heads/main/Source.lua"))()
  	end    
})



OrionLib:MakeNotification({
	Name = "Dark Hub X",
	Content = "App 0.18",
	Image = "rbxassetid://4483345998",
	Time = 10
})

local FakeTab = Window:MakeTab({
	Name = "Duplicar fruta",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

FakeTab:AddTextbox({
    Name = "Quantidade",
    Default = "1",
    TextDisappear = false,
    Callback = function(Value)
        Value = tonumber(Value) -- Converte o valor digitado para número
        if Value == nil then
            OrionLib:MakeNotification({
                Name = "Error❌️",
                Content = "Duplicamento cancelado. Valor inválido.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
            return
        end

        if Value > 500 or Value <= 0 then
            OrionLib:MakeNotification({
                Name = "duplicar fruta",
                Content = "A quantidade " .. Value .. " não é permitida",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        else
            OrionLib:MakeNotification({
                Name = "Duplicando fruta",
                Content = "Estamos tendo dificuldade ao duplicar",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
            
            task.wait(2) -- Aguarda 2 segundos

            OrionLib:MakeNotification({
                Name = "Error❌️",
                Content = "Duplicamento cancelado. Erro ao callback",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end
})

local ConfigTab = Window:MakeTab({
	Name = "Config",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

-- Configurações globais
_G.HeadSize = 1
_G.MobEnabled = false
_G.PlayerEnabled = false

-- Função para ajustar hitbox de NPCs (Mob)
local function adjustMobHitbox()
	if not _G.MobEnabled then return end -- Só executa se o toggle estiver ativo
	
	for _, npc in pairs(workspace:GetDescendants()) do
		if npc:IsA("Model") and npc:FindFirstChild("Humanoid") and not game.Players:GetPlayerFromCharacter(npc) then
			pcall(function()
				local part = npc:FindFirstChild("HumanoidRootPart") or npc:FindFirstChildWhichIsA("BasePart")
				if part then
					part.Size = Vector3.new(_G.HeadSize, _G.HeadSize, _G.HeadSize)
					part.Transparency = 0.7
					part.BrickColor = BrickColor.new("Really red")
					part.Material = Enum.Material.Neon
					part.CanCollide = false
				end
			end)
		end
	end
	
	print("Hitboxes de NPCs atualizadas com tamanho:", _G.HeadSize)
end

-- Função para ajustar hitbox de jogadores (Player)
local function adjustPlayerHitbox()
	if not _G.PlayerEnabled then return end -- Só executa se o toggle estiver ativo

	for _, player in pairs(game.Players:GetPlayers()) do
		if player.Name ~= game.Players.LocalPlayer.Name and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			pcall(function()
				local part = player.Character.HumanoidRootPart
				part.Size = Vector3.new(_G.HeadSize, _G.HeadSize, _G.HeadSize)
				part.Transparency = 0.7
				part.BrickColor = BrickColor.new("Really blue")
				part.Material = Enum.Material.Neon
				part.CanCollide = false
			end)
		end
	end
	
	print("Hitboxes de jogadores atualizadas com tamanho:", _G.HeadSize)
end

-- Atualizar hitbox automaticamente a cada 10 segundos
task.spawn(function()
	while true do
		if _G.MobEnabled then
			adjustMobHitbox()
		end
		if _G.PlayerEnabled then
			adjustPlayerHitbox()
		end
		task.wait(10) -- Aguarda 10 segundos antes de atualizar novamente
	end
end)

-- A aba de Configuração
ConfigTab:AddToggle({
	Name = "Mob",
	Default = false,
	Callback = function(Value)
		_G.MobEnabled = Value
		print("Mob Toggle:", Value)
		if Value then
			adjustMobHitbox() -- Ajusta imediatamente ao ativar
		end
	end
})

-- Toggle para ativar/desativar ajuste de hitbox de jogadores
ConfigTab:AddToggle({
	Name = "Player",
	Default = false,
	Callback = function(Value)
		_G.PlayerEnabled = Value
		print("Player Toggle:", Value)
		if Value then
			adjustPlayerHitbox() -- Ajusta imediatamente ao ativar
		end
	end
})

-- Input para definir o tamanho da hitbox
ConfigTab:AddTextbox({
	Name = "Distancia do Click",
	Default = "1",
	TextDisappear = false,
	Callback = function(Value)
		local newSize = tonumber(Value)
		if newSize then
			_G.HeadSize = newSize
			print("Nova hitbox definida:", _G.HeadSize)
		else
			warn("Valor inválido! Insira um número.")
		end
	end
})

-- Variáveis globais que controlam as animações e cooldowns
local animationsActive = true
local cooldownActive = true

-- Função para cancelar animações
local function cancelAnimations()
    -- Desative ou pare todas as animações aqui
    -- Exemplo: interrompa todas as animações ativas no personagem
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
        local humanoid = game.Players.LocalPlayer.Character.Humanoid
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop()
        end
    end
    animationsActive = false
    print("Animações canceladas.")
end

-- Função para cancelar cooldowns
local function cancelCooldowns()
    -- Desative ou reinicie o tempo de cooldown aqui
    -- Exemplo: resetando variáveis de cooldown para permitir reutilização imediata
    cooldownActive = false
    print("Cooldowns cancelados.")
end

-- Função para restaurar animações e cooldowns
local function restoreAnimationsAndCooldowns()
    -- Aqui você pode restaurar as animações e cooldowns, se necessário
    animationsActive = true
    cooldownActive = true
    print("Animações e cooldowns restaurados.")
end

-- Toggle para desativar animações e cooldowns
ConfigTab:AddToggle({
    Name = "Clique rapido",
    Default = true,
    Callback = function(Value)
        if Value then
            cancelAnimations()  -- Cancela as animações
            cancelCooldowns()   -- Cancela os cooldowns
        else
            restoreAnimationsAndCooldowns()  -- Restaura animações e cooldowns
        end
        print("Toggle ativado: ", Value)
    end  
})
